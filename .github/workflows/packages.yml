name: Build Packages

on:
  push:
    paths-ignore:
    - 'docs/**'
    - '**.md'
    - 'appveyor.yml'
    - '.travis.yml'
  pull_request:
    paths-ignore:
    - 'docs/**'
    - '**.md'
    - 'appveyor.yml'
    - '.travis.yml'

env:
  QT_VERSION: 5.15.2
  QTCREATOR_VERSION: 5.0.3
  QBS_VERSION: 1.21.0
  SENTRY_VERSION: 0.4.15
  SENTRY_ORG: mapeditor
  SENTRY_PROJECT: tiled
  TILED_RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}
  TILED_SNAPSHOT: ${{ !startsWith(github.ref, 'refs/tags/v') }}

jobs:
  version:
    name: Determine Tiled version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      release: ${{ steps.get-version.outputs.release }}

    steps:
    - name: Get version
      id: get-version
      run: |
        if [[ "$TILED_RELEASE" == 'true' ]]; then echo "::set-output name=version::${GITHUB_REF:11}" ; fi
        if [[ "$TILED_RELEASE" != 'true' ]]; then echo "::set-output name=version::$(date "+%Y.%m.%d")" ; fi
        echo "::set-output name=release::${TILED_RELEASE}"

  linux:
    name: Linux (AppImage, Qt ${{ matrix.qt_version_major }})
    runs-on: ${{ matrix.image }}
    needs: version

    strategy:
      matrix:
        include:
        - image: ubuntu-18.04
          qt_version: 5.15.2
          qt_version_major: 5
          qt_creator_version: 5.0.3
          gcc_version: 9
        - image: ubuntu-20.04
          qt_version: 6.2.4
          qt_version_major: 6
          qt_creator_version: 6.0.2
          gcc_version: 10

    env:
      TILED_VERSION: ${{ needs.version.outputs.version }}
      QT_VERSION: ${{ matrix.qt_version }}
      QTCREATOR_VERSION: ${{ matrix.qt_creator_version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-randr0 libzstd-dev libcurl4-openssl-dev

    - name: Install Qt
      run: |
        ./dist/install-qt.sh --version ${QT_VERSION} qtbase qtdeclarative qtsvg qtimageformats qttools qttranslations icu | tee -a $GITHUB_PATH
        ./dist/install-qt.sh --version ${QTCREATOR_VERSION} qtcreator | tee -a $GITHUB_PATH

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        max-size: 250M

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.8
      with:
        cmake-version: '3.19'

    - name: Setup Qbs
      run: |
        qbs --version
        qbs setup-toolchains --detect
        qbs config defaultProfile x86_64-linux-gnu-gcc-${{ matrix.gcc_version }}

    - name: Build Sentry Native
      run: |
        curl -sLO https://github.com/getsentry/sentry-native/releases/download/${SENTRY_VERSION}/sentry-native.zip
        mkdir sentry-native
        pushd sentry-native
        unzip -q ../sentry-native.zip
        cmake -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo
        cmake --build build --parallel
        sudo cmake --install build --prefix /usr --config RelWithDebInfo
        popd

    - name: Build Tiled
      run: |
        qbs install --install-root AppDir config:release qbs.installPrefix:/usr projects.Tiled.sentry:true qbs.debugInformation:true modules.cpp.separateDebugInformation:true modules.cpp.compilerWrapper:ccache

    - name: Upload symbols and sources to Sentry
      if: github.repository == 'mapeditor/tiled' && github.event_name == 'push'
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      run: |
        curl -sL https://sentry.io/get-cli/ | bash
        sentry-cli upload-dif --include-sources src .

    - name: Build AppImage
      run: |
        cp LICENSE* COPYING *md AppDir/
        wget --no-verbose "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        wget --no-verbose "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
        chmod +x linuxdeploy*.AppImage
        export EXTRA_QT_PLUGINS=svg
        export LD_LIBRARY_PATH=/opt/Qt/${QT_VERSION}/gcc_64/lib:$PWD/AppDir/usr/lib
        export OUTPUT=Tiled-Qt${{ matrix.qt_version_major }}-x86_64.AppImage
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt --output appimage

    - name: Upload Tiled.AppImage
      uses: actions/upload-artifact@v2
      with:
        name: Tiled-Qt${{ matrix.qt_version_major }}-x86_64.AppImage
        path: Tiled-Qt${{ matrix.qt_version_major }}-x86_64.AppImage

  snap:
    name: Linux (snap)
    runs-on: ubuntu-latest
    needs: version

    env:
      TILED_VERSION: ${{ needs.version.outputs.version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set Tiled version
      id: version
      run: |
        sed -i 's/^version: .*/version: '"${TILED_VERSION}"'/g' snap/snapcraft.yaml
        if [[ "$TILED_RELEASE" == 'true' ]]; then echo "::set-output name=snap_channel::candidate" ; fi
        if [[ "$TILED_RELEASE" != 'true' ]]; then echo "::set-output name=snap_channel::beta" ; fi

    - name: Build snap
      id: build
      uses: snapcore/action-build@v1

    - name: Upload snap artifact
      uses: actions/upload-artifact@v2
      with:
        name: tiled_amd64.snap
        path: tiled_*_amd64.snap

    - name: Release snap (beta channel)
      uses: snapcore/action-publish@v1
      if: github.repository == 'mapeditor/tiled' && github.event_name == 'push' && (github.ref == 'refs/heads/snapshot' || needs.version.outputs.release == 'true')
      with:
        store_login: ${{ secrets.SNAP_STORE_LOGIN }}
        snap: ${{ steps.build.outputs.snap }}
        release: ${{ steps.version.outputs.snap_channel }}

  macos:
    name: macOS (Qt ${{ matrix.qt_version_major }})
    runs-on: macos-latest
    needs: version

    strategy:
      matrix:
        include:
        - qt_version: 5.15.2
          qt_version_major: 5
          qt_creator_version: 5.0.3
        - qt_version: 6.2.4
          qt_version_major: 6
          qt_creator_version: 6.0.2

    env:
      TILED_VERSION: ${{ needs.version.outputs.version }}
      QT_VERSION: ${{ matrix.qt_version }}
      QTCREATOR_VERSION: ${{ matrix.qt_creator_version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Qt
      run: |
        sudo ./dist/install-qt.sh --version ${QT_VERSION} qtbase qtdeclarative qtsvg qtimageformats qttools | tee -a $GITHUB_PATH
        sudo ./dist/install-qt.sh --version ${QTCREATOR_VERSION} qtcreator | tee -a $GITHUB_PATH

    - name: Setup Qbs
      run: |
        qbs setup-toolchains --detect
        qbs config defaultProfile xcode

    - name: Build Zstandard
      run: |
        git clone --depth 1 -b master https://github.com/facebook/zstd.git
        pushd zstd/lib
        make libzstd.a
        popd

    - name: Build Tiled
      run: |
        qbs install --install-root install config:release qbs.installPrefix:"" projects.Tiled.staticZstd:true

    - name: Deploy Qt
      run: |
        macdeployqt install/Tiled.app -verbose=2
        pushd install
        ruby ../dist/macos/fixup-install-names.rb

    - name: Import Certificate
      if: github.repository == 'mapeditor/tiled' && github.event_name == 'push'
      uses: devbotsxyz/xcode-import-certificate@v1
      with:
        certificate-data: ${{ secrets.MACOS_CERTIFICATE }}
        certificate-passphrase: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        keychain-password: ${{ secrets.KEYCHAIN_PWD }}

    - name: Sign
      if: github.repository == 'mapeditor/tiled' && github.event_name == 'push'
      run: |
        codesign --deep --force --verify --verbose --sign Lindeijer --options runtime install/Tiled.app

    - name: Notarize
      if: github.repository == 'mapeditor/tiled' && github.event_name == 'push'
      uses: devbotsxyz/xcode-notarize@v1
      with:
        product-path: install/Tiled.app
        appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
        appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

    - name: Staple
      if: github.repository == 'mapeditor/tiled' && github.event_name == 'push'
      uses: devbotsxyz/xcode-staple@v1
      with:
        product-path: install/Tiled.app

    - name: Create Archive
      run: |
        ditto -c -k --sequesterRsrc --keepParent install/Tiled.app Tiled-Qt${{ matrix.qt_version_major }}-macos.zip

    - name: Upload Tiled.app
      uses: actions/upload-artifact@v2
      with:
        name: Tiled-Qt${{ matrix.qt_version_major }}-macos.app
        path: Tiled-Qt${{ matrix.qt_version_major }}-macos.zip

  windows:
    name: Windows (${{ matrix.arch }}-bit, Qt ${{ matrix.qt_version_major }})
    runs-on: windows-2019
    needs: version

    strategy:
      matrix:
        include:
        - qt_version: 5.15.2
          qt_version_major: 5
          qt_toolchain: win32_mingw81
          arch: 32
          openssl_arch: x86
          mingw_version: 8.1.0
          mingw_component: mingw
        - qt_version: 6.2.4
          qt_version_major: 6
          qt_toolchain: win64_mingw
          arch: 64
          openssl_arch: x64
          mingw_version: 9.0.0
          mingw_component: mingw90

    env:
      TILED_VERSION: ${{ needs.version.outputs.version }}
      OPENSSL_VERSION: 1.1.1

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Qt
      run: |
        echo "QT_PATH=$(./dist/install-qt.sh --version ${{ matrix.qt_version }} --toolchain ${{ matrix.qt_toolchain }} qtbase qtdeclarative qtsvg qtimageformats qttools qttranslations)" >> $GITHUB_ENV
        echo "MINGW_PATH=$(./dist/install-qt.sh --version ${{ matrix.mingw_version }} --toolchain win${{ matrix.arch }}_mingw ${{ matrix.mingw_component }})" >> $GITHUB_ENV
        echo "OPENSSL_PATH=$(./dist/install-qt.sh --version ${OPENSSL_VERSION} openssl --arch ${{ matrix.openssl_arch }})" >> $GITHUB_ENV

    - name: Install Qbs
      run: |
        choco install -y qbs --version ${QBS_VERSION}

    - name: Setup Qbs
      run: |
        qbs setup-toolchains ${MINGW_PATH}/*-w64-mingw32-gcc.exe mingw
        qbs setup-qt ${QT_PATH}/qmake.exe qt
        qbs config defaultProfile qt

    - name: Build Zstandard
      run: |
        export PATH="${MINGW_PATH}:$PATH"
        git clone --depth 1 -b master https://github.com/facebook/zstd.git
        pushd zstd/lib
        CC=gcc mingw32-make -j2 libzstd.a
        popd

    - name: Build Tiled
      run: |
        export TILED_MSI_VERSION=1.4.${GITHUB_RUN_NUMBER}
        qbs build config:release projects.Tiled.windowsInstaller:true projects.Tiled.staticZstd:true
        mv release/installer*/Tiled-*.msi .

    - name: Upload Tiled installer
      uses: actions/upload-artifact@v2
      with:
        name: Tiled-win${{ matrix.arch }}.msi
        path: Tiled-*.msi

    - name: Upload Tiled archive
      uses: actions/upload-artifact@v2
      with:
        name: Tiled-win${{ matrix.arch }}
        path: release/install-root/*

  itch:
    name: Upload to itch.io (${{ matrix.channel }})
    runs-on: ubuntu-latest
    needs: [version, linux, macos, windows]

    if: github.repository == 'mapeditor/tiled' && github.event_name == 'push' && github.ref == 'refs/heads/snapshot'

    strategy:
      matrix:
        include:
        - channel: linux-64bit
          artifact: Tiled-Qt6-x86_64.AppImage
          prepare: chmod +x upload/Tiled-Qt6-x86_64.AppImage

        - channel: macos
          artifact: Tiled-macos.app
          prepare: |
            pushd upload
            unzip Tiled-macos.zip
            rm Tiled-macos.zip
            popd

        - channel: windows-32bit
          artifact: Tiled-win32

        - channel: windows-64bit
          artifact: Tiled-win64

    steps:
    - name: Download artifact
      id: download
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.artifact }}
        path: upload

    - name: Prepare artifact
      if: matrix.prepare
      run: ${{ matrix.prepare }}

    - name: Download Butler
      run: |
        curl -JOL https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
        unzip butler-linux-amd64.zip

    - name: Push to itch.io
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        TILED_VERSION: ${{ needs.version.outputs.version }}
      run: |
        ITCH_CHANNEL=${{ matrix.channel }}
        if [[ "$TILED_SNAPSHOT" == 'true' ]]; then ITCH_CHANNEL="${ITCH_CHANNEL}-snapshot" ; fi
        ./butler push --userversion=${TILED_VERSION} upload thorbjorn/tiled:${ITCH_CHANNEL}

  github:
    name: Upload to GitHub releases
    runs-on: ubuntu-latest
    needs: [version, linux, macos, windows]

    if: github.repository == 'mapeditor/tiled' && github.event_name == 'push' && needs.version.outputs.release == 'true'

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Tiled ${{ needs.version.outputs.version }}
          draft: true
          prerelease: false

      - name: Download Windows 64-bit installer
        id: download-win64-installer
        uses: actions/download-artifact@v3
        with:
          name: Tiled-win64.msi

      - name: Download Windows 32-bit installer
        id: download-win32-installer
        uses: actions/download-artifact@v3
        with:
          name: Tiled-win32.msi

      - name: Download Linux AppImage (Qt5)
        id: download-appimage-qt5
        uses: actions/download-artifact@v3
        with:
          name: Tiled-Qt5-x86_64.AppImage

      - name: Download Linux AppImage (Qt6)
        id: download-appimage-qt6
        uses: actions/download-artifact@v3
        with:
          name: Tiled-Qt6-x86_64.AppImage

      - name: Download macOS app (Qt5)
        id: download-app-qt5
        uses: actions/download-artifact@v3
        with:
          name: Tiled-Qt5-macos.app

      - name: Download macOS app (Qt6)
        id: download-app-qt6
        uses: actions/download-artifact@v3
        with:
          name: Tiled-Qt6-macos.app

      - name: 'Echo download paths'
        run: |
          echo ${{steps.download-win64-installer.outputs.download-path}}
          echo ${{steps.download-win32-installer.outputs.download-path}}
          echo ${{steps.download-appimage-qt5.outputs.download-path}}
          echo ${{steps.download-appimage-qt6.outputs.download-path}}
          echo ${{steps.download-app-qt5.outputs.download-path}}
          echo ${{steps.download-app-qt6.outputs.download-path}}

      - name: Upload Windows 64-bit installer
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Tiled-${{ needs.version.outputs.version }}-win64.msi
          asset_name: Tiled-${{ needs.version.outputs.version }}-win64.msi
          asset_content_type: applictaion/x-msi

      - name: Upload Windows 32-bit installer
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Tiled-${{ needs.version.outputs.version }}-win32.msi
          asset_name: Tiled-${{ needs.version.outputs.version }}-win32.msi
          asset_content_type: applictaion/x-msi

      - name: Upload Linux AppImage (Qt5)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Tiled-Qt5-x86_64.AppImage
          asset_name: Tiled-${{ needs.version.outputs.version }}-Qt5-x86_64.AppImage
          asset_content_type: application/vnd.appimage

      - name: Upload Linux AppImage (Qt6)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Tiled-Qt6-x86_64.AppImage
          asset_name: Tiled-${{ needs.version.outputs.version }}-x86_64.AppImage
          asset_content_type: application/vnd.appimage

      - name: Upload macOS app (Qt5)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Tiled-Qt5-macos.zip
          asset_name: Tiled-${{ needs.version.outputs.version }}-macos-10.12-10.13.zip
          asset_content_type: application/zip

      - name: Upload macOS app (Qt6)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Tiled-Qt6-macos.zip
          asset_name: Tiled-${{ needs.version.outputs.version }}-macos-10.14+.zip
          asset_content_type: application/zip

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        with:
          environment: releases
          version: tiled@${{ needs.version.outputs.version }}
